// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Users {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  image     String
  createdAt DateTime @default(now())
  pages     Page[]   // Relation field indicating a user has multiple pages
}

model Page {
  id             String          @id @default(uuid())
  title          String
  content        String?
  url            String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  userId         String          // Foreign key changed to String to match Users.id
  user           Users           @relation(fields: [userId], references: [id]) // Relation to Users model
  pageSnapshots  PageSnapShots[]
}

model PageSnapShots {
  page_snapshot_id String   @id @default(uuid())
  page_id          String   
  title            String
  raw_html         String
  fetched_at       DateTime @default(now())
  cleaned_html     String?
  cleaned_at       DateTime?
  markdown_id      String   @unique
  page             Page     @relation(fields: [page_id], references: [id])
}

/// This is a view that shows the latest snapshot for each page
view LatestSnapshot {
  page_id          String  @unique
  page_snapshot_id String  // Changed to String to match PageSnapShots.page_snapshot_id

  @@map("LatestSnapshot")
}

model Markdown {
  markdown_id  String   @id @default(uuid())
  title        String
  content_md   String
  
  // Relations to child models
  mdSummaries     MdSummary[]
  titleEmbeddings TitleEmbedding[]
  quoteEmbeddings QuoteEmbedding[]
  categories      Category[]
}

model MdSummary {
  note_id          String  @id @default(uuid())
  note_summary_id  String
  summary          String  @db.Text
  engine_version   String
  markdown         Markdown @relation(fields: [note_id], references: [markdown_id])
  
  @@unique([note_summary_id, engine_version])
}

model TitleEmbedding {
  note_id    String  @id @default(uuid())
  embedding  Bytes
  markdown   Markdown @relation(fields: [note_id], references: [markdown_id])
}

model QuoteEmbedding {
  note_id         String  @id @default(uuid())
  markdown_start  Int
  markdown_end    Int
  embedding       Bytes
  markdown        Markdown @relation(fields: [note_id], references: [markdown_id])
}

model Category {
  note_id    String  @id @default(uuid())
  category   String
  markdown   Markdown @relation(fields: [note_id], references: [markdown_id])
}